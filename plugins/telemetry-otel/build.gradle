/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.opensearch.gradle.Architecture
import org.opensearch.gradle.OS
import org.opensearch.gradle.info.BuildParams

apply plugin: 'opensearch.internal-cluster-test'

opensearchplugin {
  description 'Opentelemetry based telemetry implementation.'
  classname 'org.opensearch.telemetry.OTelTelemetryPlugin'
  hasClientJar = true
}

dependencies {
  api project(":libs:opensearch-telemetry")
  api "io.opentelemetry:opentelemetry-api:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-context:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-sdk-common:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-sdk-trace:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-sdk-metrics:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-exporter-logging:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-semconv:${versions.opentelemetry}-alpha"
  api "io.opentelemetry:opentelemetry-sdk-logs:${versions.opentelemetry}-alpha"
  api "io.opentelemetry:opentelemetry-api-logs:${versions.opentelemetry}-alpha"
  api "io.opentelemetry:opentelemetry-exporter-otlp:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-exporter-common:${versions.opentelemetry}"
  api "io.opentelemetry:opentelemetry-exporter-otlp-common:${versions.opentelemetry}"
  api "com.squareup.okhttp3:okhttp:4.10.0"
  api "org.jetbrains.kotlin:kotlin-stdlib:1.6.20"
  api "com.squareup.okio:okio-jvm:3.0.0"
  testImplementation "io.opentelemetry:opentelemetry-sdk-testing:${versions.opentelemetry}"
}


thirdPartyAudit {
  ignoreViolations(
   'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueConsumerIndexField',
   'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueProducerIndexField',
   'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueProducerLimitField',
   'io.opentelemetry.internal.shaded.jctools.util.UnsafeAccess',
   'io.opentelemetry.internal.shaded.jctools.util.UnsafeRefArrayAccess'
  )

  ignoreMissingClasses(
    'android.net.http.X509TrustManagerExtensions',
    'android.net.ssl.SSLSockets',
    'android.os.Build$VERSION',
    'android.security.NetworkSecurityPolicy',
    'android.util.Log',
    'com.google.common.io.ByteStreams',
    'com.google.common.util.concurrent.FutureCallback',
    'com.google.common.util.concurrent.Futures',
    'com.google.common.util.concurrent.ListenableFuture',
    'com.google.common.util.concurrent.MoreExecutors',
    'io.grpc.CallOptions',
    'io.grpc.Channel',
    'io.grpc.ClientInterceptor',
    'io.grpc.ClientInterceptors',
    'io.grpc.Codec',
    'io.grpc.Codec$Identity',
    'io.grpc.Drainable',
    'io.grpc.KnownLength',
    'io.grpc.ManagedChannel',
    'io.grpc.Metadata',
    'io.grpc.Metadata$Key',
    'io.grpc.MethodDescriptor',
    'io.grpc.MethodDescriptor$Builder',
    'io.grpc.MethodDescriptor$Marshaller',
    'io.grpc.MethodDescriptor$MethodType',
    'io.grpc.Status',
    'io.grpc.Status$Code',
    'io.grpc.stub.AbstractFutureStub',
    'io.grpc.stub.AbstractStub',
    'io.grpc.stub.ClientCalls',
    'io.grpc.stub.MetadataUtils',
    'org.bouncycastle.jsse.BCSSLParameters',
    'org.bouncycastle.jsse.BCSSLSocket',
    'org.conscrypt.Conscrypt',
    'org.conscrypt.Conscrypt$Version',
    'org.conscrypt.ConscryptHostnameVerifier',
    'org.openjsse.javax.net.ssl.SSLParameters',
    'org.openjsse.javax.net.ssl.SSLSocket',
    'io.opentelemetry.api.events.EventEmitter',
    'io.opentelemetry.api.events.EventEmitterBuilder',
    'io.opentelemetry.api.events.EventEmitterProvider',
    'io.opentelemetry.extension.incubator.metrics.ExtendedDoubleHistogramBuilder',
    'io.opentelemetry.extension.incubator.metrics.ExtendedLongHistogramBuilder',
    'io.opentelemetry.extension.incubator.metrics.HistogramAdviceConfigurer',
    'io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties',
    'io.opentelemetry.sdk.autoconfigure.spi.logs.ConfigurableLogRecordExporterProvider',
    'io.opentelemetry.sdk.autoconfigure.spi.metrics.ConfigurableMetricExporterProvider',
    'io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider',
    'io.opentelemetry.extension.incubator.metrics.DoubleCounterAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.DoubleGauge',
    'io.opentelemetry.extension.incubator.metrics.DoubleGaugeAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.DoubleHistogramAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.DoubleUpDownCounterAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.ExtendedDoubleCounterBuilder',
    'io.opentelemetry.extension.incubator.metrics.ExtendedDoubleGaugeBuilder',
    'io.opentelemetry.extension.incubator.metrics.ExtendedDoubleUpDownCounterBuilder',
    'io.opentelemetry.extension.incubator.metrics.ExtendedLongCounterBuilder',
    'io.opentelemetry.extension.incubator.metrics.ExtendedLongGaugeBuilder',
    'io.opentelemetry.extension.incubator.metrics.ExtendedLongUpDownCounterBuilder',
    'io.opentelemetry.extension.incubator.metrics.LongCounterAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.LongGauge',
    'io.opentelemetry.extension.incubator.metrics.LongGaugeAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.LongHistogramAdviceConfigurer',
    'io.opentelemetry.extension.incubator.metrics.LongUpDownCounterAdviceConfigurer'
  )
}

tasks.named("bundlePlugin").configure {
  from('config/telemetry-otel') {
    into 'config'
  }
}

tasks.register("writeTestJavaPolicy") {
  doLast {
    final File tmp = file("${buildDir}/tmp")
    if (tmp.exists() == false && tmp.mkdirs() == false) {
      throw new GradleException("failed to create temporary directory [${tmp}]")
    }
    final File javaPolicy = file("${tmp}/java.policy")
    javaPolicy.write(
      [
        "grant {",
        "  permission java.io.FilePermission \"config\", \"read\";",
        "};"
      ].join("\n"))
  }
}
